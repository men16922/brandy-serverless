#!/usr/bin/env python3
"""
Alternative Report Generator - PDF ÎåÄÏã† HTML, JSON, ÌÖçÏä§Ìä∏ ÌòïÏãù ÏßÄÏõê
"""

import json
import os
import time
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional
import uuid
import io


class AlternativeReportGenerator:
    """PDF ÎåÄÏã† Îã§ÏñëÌïú ÌòïÏãùÏúºÎ°ú Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
    
    def __init__(self, logger=None):
        self.logger = logger
    
    def generate_html_report(self, data: Dict[str, Any]) -> str:
        """HTML ÌòïÏãù Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            business_info = data.get("business_info", {})
            analysis_result = data.get("analysis_result", {})
            business_names = data.get("business_names", [])
            signboard_images = data.get("signboard_images", [])
            interior_images = data.get("interior_images", [])
            color_palette = data.get("color_palette", {})
            budget_guide = data.get("budget_guide", {})
            recommendations = data.get("recommendations", [])
            
            html_content = f"""
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Î∏åÎûúÎî© Î≥¥Í≥†ÏÑú</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 30px;
        }}
        h2 {{
            color: #34495e;
            border-left: 4px solid #3498db;
            padding-left: 15px;
            margin-top: 30px;
        }}
        h3 {{
            color: #2c3e50;
            margin-top: 25px;
        }}
        .info-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }}
        .info-card {{
            background: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }}
        .info-label {{
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }}
        .info-value {{
            color: #34495e;
        }}
        .score-container {{
            text-align: center;
            margin: 20px 0;
        }}
        .score-circle {{
            display: inline-block;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(45deg, #3498db, #2ecc71);
            color: white;
            font-size: 24px;
            font-weight: bold;
            line-height: 100px;
            margin: 10px;
        }}
        .names-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .name-card {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }}
        .name-card.selected {{
            border-color: #28a745;
            background: #d4edda;
        }}
        .name-title {{
            font-size: 18px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }}
        .name-score {{
            color: #28a745;
            font-weight: bold;
            margin-bottom: 10px;
        }}
        .name-description {{
            color: #6c757d;
            font-size: 14px;
        }}
        .images-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .image-card {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #dee2e6;
        }}
        .image-placeholder {{
            width: 100%;
            height: 150px;
            background: linear-gradient(45deg, #e9ecef, #f8f9fa);
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            margin-bottom: 10px;
        }}
        .color-palette {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .color-item {{
            display: flex;
            align-items: center;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }}
        .color-box {{
            width: 40px;
            height: 40px;
            border-radius: 5px;
            margin-right: 15px;
            border: 2px solid #dee2e6;
        }}
        .color-info {{
            flex: 1;
        }}
        .color-name {{
            font-weight: bold;
            color: #2c3e50;
        }}
        .color-hex {{
            color: #6c757d;
            font-size: 12px;
        }}
        .color-usage {{
            color: #495057;
            font-size: 14px;
        }}
        .budget-table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        .budget-table th,
        .budget-table td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #dee2e6;
        }}
        .budget-table th {{
            background: #f8f9fa;
            font-weight: bold;
            color: #2c3e50;
        }}
        .budget-table .total-row {{
            background: #e3f2fd;
            font-weight: bold;
        }}
        .recommendations {{
            background: #f0f8ff;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #2196f3;
        }}
        .recommendations ul {{
            margin: 0;
            padding-left: 20px;
        }}
        .recommendations li {{
            margin-bottom: 10px;
            color: #2c3e50;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            color: #6c757d;
            font-size: 14px;
        }}
        .status-badge {{
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 10px;
        }}
        .status-selected {{
            background: #d4edda;
            color: #155724;
        }}
        .status-generated {{
            background: #d1ecf1;
            color: #0c5460;
        }}
        @media print {{
            body {{ background: white; }}
            .container {{ box-shadow: none; }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üé® AI Î∏åÎûúÎî© Î≥¥Í≥†ÏÑú</h1>
        
        <h2>üìã ÎπÑÏ¶àÎãàÏä§ Ï†ïÎ≥¥</h2>
        <div class="info-grid">
            <div class="info-card">
                <div class="info-label">ÏóÖÏ¢Ö</div>
                <div class="info-value">{business_info.get('industry', 'N/A')}</div>
            </div>
            <div class="info-card">
                <div class="info-label">ÏßÄÏó≠</div>
                <div class="info-value">{business_info.get('region', 'N/A')}</div>
            </div>
            <div class="info-card">
                <div class="info-label">Í∑úÎ™®</div>
                <div class="info-value">{business_info.get('size', 'N/A')}</div>
            </div>
            <div class="info-card">
                <div class="info-label">ÏÉùÏÑ±Ïùº</div>
                <div class="info-value">{datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')}</div>
            </div>
        </div>
        
        {self._generate_analysis_section_html(analysis_result)}
        
        {self._generate_business_names_section_html(business_names, data.get('selected_name', ''))}
        
        {self._generate_signboard_section_html(signboard_images, data.get('selected_signboard', ''))}
        
        {self._generate_interior_section_html(interior_images, data.get('selected_interior', ''))}
        
        {self._generate_color_palette_section_html(color_palette)}
        
        {self._generate_budget_section_html(budget_guide)}
        
        {self._generate_recommendations_section_html(recommendations)}
        
        <div class="footer">
            <p>Generated by AI Branding Chatbot on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p>Session ID: {data.get('session_id', 'N/A')}</p>
        </div>
    </div>
</body>
</html>
            """
            
            return html_content.strip()
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"Failed to generate HTML report: {str(e)}")
            raise
    
    def _generate_analysis_section_html(self, analysis_result: Dict[str, Any]) -> str:
        """AI Î∂ÑÏÑù Í≤∞Í≥º ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not analysis_result:
            return ""
        
        overall_score = analysis_result.get('overall_score', 0)
        market_potential = analysis_result.get('market_potential', 'N/A')
        competition_level = analysis_result.get('competition_level', 'N/A')
        insights = analysis_result.get('insights', [])
        
        insights_html = ""
        if insights:
            insights_html = "<ul>" + "".join([f"<li>{insight}</li>" for insight in insights]) + "</ul>"
        
        return f"""
        <h2>üîç AI Î∂ÑÏÑù Í≤∞Í≥º</h2>
        <div class="score-container">
            <div class="score-circle">{overall_score}/100</div>
        </div>
        <div class="info-grid">
            <div class="info-card">
                <div class="info-label">ÏãúÏû• Ïû†Ïû¨Î†•</div>
                <div class="info-value">{market_potential}</div>
            </div>
            <div class="info-card">
                <div class="info-label">Í≤ΩÏüÅ ÏàòÏ§Ä</div>
                <div class="info-value">{competition_level}</div>
            </div>
        </div>
        {f'<h3>ÌïµÏã¨ Ïù∏ÏÇ¨Ïù¥Ìä∏</h3>{insights_html}' if insights else ''}
        """
    
    def _generate_business_names_section_html(self, business_names: List[Dict], selected_name: str) -> str:
        """ÏÉÅÌò∏Î™Ö ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not business_names:
            return ""
        
        names_html = ""
        for i, name_data in enumerate(business_names[:3]):
            name = name_data.get('name', f'Name {i+1}')
            score = name_data.get('total_score', name_data.get('score', 0))
            description = name_data.get('description', 'Ï∂îÏ≤ú ÏÉÅÌò∏Î™ÖÏûÖÎãàÎã§.')
            
            selected_class = "selected" if name == selected_name else ""
            status_badge = '<span class="status-badge status-selected">‚úì ÏÑ†ÌÉùÎê®</span>' if name == selected_name else '<span class="status-badge status-generated">ÏÉùÏÑ±Îê®</span>'
            
            names_html += f"""
            <div class="name-card {selected_class}">
                <div class="name-title">{i+1}. {name}{status_badge}</div>
                <div class="name-score">Ï†êÏàò: {score}/100</div>
                <div class="name-description">{description}</div>
            </div>
            """
        
        return f"""
        <h2>üè™ Ï∂îÏ≤ú ÏÉÅÌò∏Î™Ö</h2>
        <p>AIÍ∞Ä Î∂ÑÏÑùÌïú ÏµúÏ†ÅÏùò ÏÉÅÌò∏Î™Ö ÌõÑÎ≥¥Îì§ÏûÖÎãàÎã§.</p>
        <div class="names-grid">
            {names_html}
        </div>
        """
    
    def _generate_signboard_section_html(self, signboard_images: List[Dict], selected_signboard: str) -> str:
        """Í∞ÑÌåê ÎîîÏûêÏù∏ ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not signboard_images:
            return ""
        
        images_html = ""
        for i, img in enumerate(signboard_images):
            filename = img.get('key', '').split('/')[-1]
            size_mb = img.get('size', 0) / (1024 * 1024)
            style = self._extract_style_from_filename(filename)
            
            selected_class = "selected" if filename == selected_signboard else ""
            status_badge = '<span class="status-badge status-selected">‚úì ÏÑ†ÌÉùÎê®</span>' if filename == selected_signboard else '<span class="status-badge status-generated">ÏÉùÏÑ±Îê®</span>'
            
            images_html += f"""
            <div class="image-card {selected_class}">
                <div class="image-placeholder">
                    üñºÔ∏è Í∞ÑÌåê Ïù¥ÎØ∏ÏßÄ<br>{style}
                </div>
                <div><strong>{filename}</strong>{status_badge}</div>
                <div>ÌÅ¨Í∏∞: {size_mb:.1f}MB</div>
                <div>Ïä§ÌÉÄÏùº: {style}</div>
            </div>
            """
        
        return f"""
        <h2>ü™ß Í∞ÑÌåê ÎîîÏûêÏù∏</h2>
        <p>Ï¥ù {len(signboard_images)}Í∞úÏùò Í∞ÑÌåê ÎîîÏûêÏù∏Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.</p>
        <div class="images-grid">
            {images_html}
        </div>
        """
    
    def _generate_interior_section_html(self, interior_images: List[Dict], selected_interior: str) -> str:
        """Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏ ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not interior_images:
            return ""
        
        images_html = ""
        for i, img in enumerate(interior_images):
            filename = img.get('key', '').split('/')[-1]
            size_mb = img.get('size', 0) / (1024 * 1024)
            style = self._extract_style_from_filename(filename)
            
            selected_class = "selected" if filename == selected_interior else ""
            status_badge = '<span class="status-badge status-selected">‚úì ÏÑ†ÌÉùÎê®</span>' if filename == selected_interior else '<span class="status-badge status-generated">ÏÉùÏÑ±Îê®</span>'
            
            images_html += f"""
            <div class="image-card {selected_class}">
                <div class="image-placeholder">
                    üè† Ïù∏ÌÖåÎ¶¨Ïñ¥ Ïù¥ÎØ∏ÏßÄ<br>{style}
                </div>
                <div><strong>{filename}</strong>{status_badge}</div>
                <div>ÌÅ¨Í∏∞: {size_mb:.1f}MB</div>
                <div>Ïä§ÌÉÄÏùº: {style}</div>
            </div>
            """
        
        return f"""
        <h2>üè† Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏</h2>
        <p>Ï¥ù {len(interior_images)}Í∞úÏùò Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.</p>
        <div class="images-grid">
            {images_html}
        </div>
        """
    
    def _generate_color_palette_section_html(self, color_palette: Dict[str, Any]) -> str:
        """ÏÉâÏÉÅ ÌåîÎ†àÌä∏ ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not color_palette:
            return ""
        
        colors_html = ""
        for color_type, color_info in color_palette.items():
            if isinstance(color_info, dict):
                name = color_info.get('name', color_type)
                hex_code = color_info.get('hex', '#000000')
                usage = color_info.get('usage', 'Ïö©ÎèÑ ÎØ∏ÏßÄÏ†ï')
                
                colors_html += f"""
                <div class="color-item">
                    <div class="color-box" style="background-color: {hex_code};"></div>
                    <div class="color-info">
                        <div class="color-name">{name}</div>
                        <div class="color-hex">{hex_code}</div>
                        <div class="color-usage">{usage}</div>
                    </div>
                </div>
                """
        
        return f"""
        <h2>üé® ÏÉâÏÉÅ ÌåîÎ†àÌä∏</h2>
        <p>Î∏åÎûúÎìúÏóê ÏµúÏ†ÅÌôîÎêú ÏÉâÏÉÅ Ï°∞Ìï©ÏûÖÎãàÎã§.</p>
        <div class="color-palette">
            {colors_html}
        </div>
        """
    
    def _generate_budget_section_html(self, budget_guide: Dict[str, Any]) -> str:
        """ÏòàÏÇ∞ Í∞ÄÏù¥Îìú ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not budget_guide:
            return ""
        
        budget_rows = ""
        total_data = None
        
        for category, costs in budget_guide.items():
            if category == 'total':
                total_data = costs
                continue
            
            if isinstance(costs, dict):
                category_name = {
                    'signboard': 'Í∞ÑÌåê',
                    'interior': 'Ïù∏ÌÖåÎ¶¨Ïñ¥',
                    'branding': 'Î∏åÎûúÎî©',
                    'marketing': 'ÎßàÏºÄÌåÖ'
                }.get(category, category)
                
                min_cost = f"{costs.get('min', 0):,} Ïõê"
                recommended_cost = f"{costs.get('recommended', 0):,} Ïõê"
                max_cost = f"{costs.get('max', 0):,} Ïõê"
                
                budget_rows += f"""
                <tr>
                    <td>{category_name}</td>
                    <td>{min_cost}</td>
                    <td>{recommended_cost}</td>
                    <td>{max_cost}</td>
                </tr>
                """
        
        total_row = ""
        if total_data:
            total_row = f"""
            <tr class="total-row">
                <td><strong>Ï¥ù ÏòàÏÇ∞</strong></td>
                <td><strong>{total_data.get('min', 0):,} Ïõê</strong></td>
                <td><strong>{total_data.get('recommended', 0):,} Ïõê</strong></td>
                <td><strong>{total_data.get('max', 0):,} Ïõê</strong></td>
            </tr>
            """
        
        return f"""
        <h2>üí∞ ÏòàÏÇ∞ Í∞ÄÏù¥Îìú</h2>
        <p>Í∑úÎ™®ÏôÄ ÏóÖÏ¢ÖÏùÑ Í≥†Î†§Ìïú ÏòàÏÇ∞ Î≤îÏúÑÏûÖÎãàÎã§.</p>
        <table class="budget-table">
            <thead>
                <tr>
                    <th>Ìï≠Î™©</th>
                    <th>ÏµúÏÜå</th>
                    <th>Í∂åÏû•</th>
                    <th>ÏµúÎåÄ</th>
                </tr>
            </thead>
            <tbody>
                {budget_rows}
                {total_row}
            </tbody>
        </table>
        """
    
    def _generate_recommendations_section_html(self, recommendations: List[str]) -> str:
        """Í∂åÏû•ÏÇ¨Ìï≠ ÏÑπÏÖò HTML ÏÉùÏÑ±"""
        if not recommendations:
            return ""
        
        recommendations_html = "<ul>" + "".join([f"<li>{rec}</li>" for rec in recommendations]) + "</ul>"
        
        return f"""
        <h2>üí° Í∂åÏû•ÏÇ¨Ìï≠</h2>
        <div class="recommendations">
            {recommendations_html}
        </div>
        """
    
    def _extract_style_from_filename(self, filename: str) -> str:
        """ÌååÏùºÎ™ÖÏóêÏÑú Ïä§ÌÉÄÏùº Ï∂îÏ∂ú"""
        filename_lower = filename.lower()
        
        if 'modern' in filename_lower or 'Î™®Îçò' in filename_lower:
            return 'Î™®Îçò'
        elif 'classic' in filename_lower or 'ÌÅ¥ÎûòÏãù' in filename_lower:
            return 'ÌÅ¥ÎûòÏãù'
        elif 'minimal' in filename_lower or 'ÎØ∏ÎãàÎ©Ä' in filename_lower:
            return 'ÎØ∏ÎãàÎ©Ä'
        elif 'vibrant' in filename_lower or 'ÌôúÍ∏∞Ï∞¨' in filename_lower:
            return 'ÌôúÍ∏∞Ï∞¨'
        elif 'cozy' in filename_lower or 'ÏïÑÎäëÌïú' in filename_lower:
            return 'ÏïÑÎäëÌïú'
        elif 'professional' in filename_lower or 'Ï†ÑÎ¨∏Ï†Å' in filename_lower:
            return 'Ï†ÑÎ¨∏Ï†Å'
        elif 'scandinavian' in filename_lower or 'Ïä§Ïπ∏ÎîîÎÇòÎπÑÏïà' in filename_lower:
            return 'Ïä§Ïπ∏ÎîîÎÇòÎπÑÏïà'
        else:
            return 'Ïä§ÌÉÄÏùº'
    
    def generate_json_report(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """JSON ÌòïÏãù Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            report = {
                "metadata": {
                    "report_type": "branding_report",
                    "format": "json",
                    "generated_at": datetime.utcnow().isoformat(),
                    "session_id": data.get("session_id"),
                    "version": "1.0"
                },
                "business_info": data.get("business_info", {}),
                "analysis_result": data.get("analysis_result", {}),
                "business_names": data.get("business_names", []),
                "selections": {
                    "selected_name": data.get("selected_name", ""),
                    "selected_signboard": data.get("selected_signboard", ""),
                    "selected_interior": data.get("selected_interior", "")
                },
                "assets": {
                    "signboard_images": data.get("signboard_images", []),
                    "interior_images": data.get("interior_images", []),
                    "uploaded_images": data.get("uploaded_images", [])
                },
                "design_elements": {
                    "color_palette": data.get("color_palette", {}),
                    "budget_guide": data.get("budget_guide", {}),
                    "recommendations": data.get("recommendations", [])
                },
                "summary": {
                    "total_signboard_images": len(data.get("signboard_images", [])),
                    "total_interior_images": len(data.get("interior_images", [])),
                    "has_analysis": bool(data.get("analysis_result")),
                    "has_color_palette": bool(data.get("color_palette")),
                    "has_budget_guide": bool(data.get("budget_guide"))
                }
            }
            
            return report
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"Failed to generate JSON report: {str(e)}")
            raise
    
    def generate_text_report(self, data: Dict[str, Any]) -> str:
        """ÌÖçÏä§Ìä∏ ÌòïÏãù Î≥¥Í≥†ÏÑú ÏÉùÏÑ±"""
        try:
            business_info = data.get("business_info", {})
            analysis_result = data.get("analysis_result", {})
            business_names = data.get("business_names", [])
            signboard_images = data.get("signboard_images", [])
            interior_images = data.get("interior_images", [])
            color_palette = data.get("color_palette", {})
            budget_guide = data.get("budget_guide", {})
            recommendations = data.get("recommendations", [])
            
            report_lines = [
                "=" * 60,
                "AI Î∏åÎûúÎî© Î≥¥Í≥†ÏÑú",
                "=" * 60,
                "",
                "üìã ÎπÑÏ¶àÎãàÏä§ Ï†ïÎ≥¥",
                "-" * 30,
                f"ÏóÖÏ¢Ö: {business_info.get('industry', 'N/A')}",
                f"ÏßÄÏó≠: {business_info.get('region', 'N/A')}",
                f"Í∑úÎ™®: {business_info.get('size', 'N/A')}",
                f"ÏÉùÏÑ±Ïùº: {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')}",
                f"ÏÑ∏ÏÖò ID: {data.get('session_id', 'N/A')}",
                ""
            ]
            
            # AI Î∂ÑÏÑù Í≤∞Í≥º
            if analysis_result:
                report_lines.extend([
                    "üîç AI Î∂ÑÏÑù Í≤∞Í≥º",
                    "-" * 30,
                    f"Ï¢ÖÌï© Ï†êÏàò: {analysis_result.get('overall_score', 0)}/100",
                    f"ÏãúÏû• Ïû†Ïû¨Î†•: {analysis_result.get('market_potential', 'N/A')}",
                    f"Í≤ΩÏüÅ ÏàòÏ§Ä: {analysis_result.get('competition_level', 'N/A')}",
                    ""
                ])
                
                insights = analysis_result.get('insights', [])
                if insights:
                    report_lines.append("ÌïµÏã¨ Ïù∏ÏÇ¨Ïù¥Ìä∏:")
                    for insight in insights:
                        report_lines.append(f"‚Ä¢ {insight}")
                    report_lines.append("")
            
            # ÏÉÅÌò∏Î™Ö Ï∂îÏ≤ú
            if business_names:
                report_lines.extend([
                    "üè™ Ï∂îÏ≤ú ÏÉÅÌò∏Î™Ö",
                    "-" * 30
                ])
                
                selected_name = data.get('selected_name', '')
                for i, name_data in enumerate(business_names[:3]):
                    name = name_data.get('name', f'Name {i+1}')
                    score = name_data.get('total_score', name_data.get('score', 0))
                    description = name_data.get('description', 'Ï∂îÏ≤ú ÏÉÅÌò∏Î™ÖÏûÖÎãàÎã§.')
                    
                    status = " ‚úì ÏÑ†ÌÉùÎê®" if name == selected_name else ""
                    report_lines.append(f"{i+1}. {name} ({score}/100){status}")
                    report_lines.append(f"   {description}")
                
                report_lines.append("")
            
            # Í∞ÑÌåê ÎîîÏûêÏù∏
            if signboard_images:
                report_lines.extend([
                    "ü™ß Í∞ÑÌåê ÎîîÏûêÏù∏",
                    "-" * 30,
                    f"Ï¥ù {len(signboard_images)}Í∞úÏùò Í∞ÑÌåê ÎîîÏûêÏù∏Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.",
                    ""
                ])
                
                selected_signboard = data.get('selected_signboard', '')
                for img in signboard_images:
                    filename = img.get('key', '').split('/')[-1]
                    size_mb = img.get('size', 0) / (1024 * 1024)
                    style = self._extract_style_from_filename(filename)
                    
                    status = " ‚úì ÏÑ†ÌÉùÎê®" if filename == selected_signboard else ""
                    report_lines.append(f"‚Ä¢ {filename} ({size_mb:.1f}MB, {style}){status}")
                
                report_lines.append("")
            
            # Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏
            if interior_images:
                report_lines.extend([
                    "üè† Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏",
                    "-" * 30,
                    f"Ï¥ù {len(interior_images)}Í∞úÏùò Ïù∏ÌÖåÎ¶¨Ïñ¥ ÎîîÏûêÏù∏Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.",
                    ""
                ])
                
                selected_interior = data.get('selected_interior', '')
                for img in interior_images:
                    filename = img.get('key', '').split('/')[-1]
                    size_mb = img.get('size', 0) / (1024 * 1024)
                    style = self._extract_style_from_filename(filename)
                    
                    status = " ‚úì ÏÑ†ÌÉùÎê®" if filename == selected_interior else ""
                    report_lines.append(f"‚Ä¢ {filename} ({size_mb:.1f}MB, {style}){status}")
                
                report_lines.append("")
            
            # ÏÉâÏÉÅ ÌåîÎ†àÌä∏
            if color_palette:
                report_lines.extend([
                    "üé® ÏÉâÏÉÅ ÌåîÎ†àÌä∏",
                    "-" * 30
                ])
                
                for color_type, color_info in color_palette.items():
                    if isinstance(color_info, dict):
                        name = color_info.get('name', color_type)
                        hex_code = color_info.get('hex', '#000000')
                        usage = color_info.get('usage', 'Ïö©ÎèÑ ÎØ∏ÏßÄÏ†ï')
                        report_lines.append(f"‚Ä¢ {name}: {hex_code} ({usage})")
                
                report_lines.append("")
            
            # ÏòàÏÇ∞ Í∞ÄÏù¥Îìú
            if budget_guide:
                report_lines.extend([
                    "üí∞ ÏòàÏÇ∞ Í∞ÄÏù¥Îìú",
                    "-" * 30
                ])
                
                for category, costs in budget_guide.items():
                    if category == 'total':
                        continue
                    
                    if isinstance(costs, dict):
                        category_name = {
                            'signboard': 'Í∞ÑÌåê',
                            'interior': 'Ïù∏ÌÖåÎ¶¨Ïñ¥',
                            'branding': 'Î∏åÎûúÎî©',
                            'marketing': 'ÎßàÏºÄÌåÖ'
                        }.get(category, category)
                        
                        min_cost = f"{costs.get('min', 0):,}Ïõê"
                        recommended_cost = f"{costs.get('recommended', 0):,}Ïõê"
                        max_cost = f"{costs.get('max', 0):,}Ïõê"
                        
                        report_lines.append(f"‚Ä¢ {category_name}: {min_cost} ~ {max_cost} (Í∂åÏû•: {recommended_cost})")
                
                # Ï¥ù ÏòàÏÇ∞
                total_data = budget_guide.get('total')
                if total_data:
                    total_min = f"{total_data.get('min', 0):,}Ïõê"
                    total_recommended = f"{total_data.get('recommended', 0):,}Ïõê"
                    total_max = f"{total_data.get('max', 0):,}Ïõê"
                    report_lines.append(f"‚Ä¢ Ï¥ù ÏòàÏÇ∞: {total_min} ~ {total_max} (Í∂åÏû•: {total_recommended})")
                
                report_lines.append("")
            
            # Í∂åÏû•ÏÇ¨Ìï≠
            if recommendations:
                report_lines.extend([
                    "üí° Í∂åÏû•ÏÇ¨Ìï≠",
                    "-" * 30
                ])
                
                for rec in recommendations:
                    report_lines.append(f"‚Ä¢ {rec}")
                
                report_lines.append("")
            
            # Ìë∏ÌÑ∞
            report_lines.extend([
                "=" * 60,
                f"Generated by AI Branding Chatbot on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "=" * 60
            ])
            
            return "\n".join(report_lines)
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"Failed to generate text report: {str(e)}")
            raise